set encoding=utf-8
let $LANG="ja"
set nobackup "バックアップファイルを作らない
set noswapfile "スワップファイルを作らない
set autoread "編集中のファイルが変更されたら自動で読み直す
set hlsearch "ハイライトサーチを有効にする
set hidden "バッファが編集中でもその他のファイルを開けるように
set showcmd "入力中のコマンドをステータスに表示する
set mouse=a " マウス利用可能
set clipboard=unnamed  " クリップボードを共有する(設定しないとvimとのコピペが面倒です)

set multiple-cursors

" 見た目系
set number "行番号表示
set cursorline "現在の行を強調表示
set cursorcolumn "現在の列を強調表示
set virtualedit=onemore " 行末の1文字先までカーソルを移動できるように
set smartindent "インデントはスマートインデント
set visualbell " ビープ音を可視化
set showmatch " カッコ入力時の対応するカッコを表示
source $VIMRUNTIME/macros/matchit.vim " Vimの「%」を拡張する
set laststatus=2 " ステータスラインを常に表示
set wildmode=list:longest " コマンドラインの補完
set wildmenu " コマンドモードの補完
set history=5000 " 保存するコマンド履歴の数

nnoremap j gj
nnoremap k gk

syntax enable " シンタックスハイライトの有効化
colorscheme molokai

set spell " スペルチェック
set spelllang=en,cjk

" Tab系
set list listchars=tab:\▸\- " 不可視文字を可視化(タブが「▸-」と表示される)
set expandtab " Tab文字を半角スペースにする
set tabstop=2 " 行頭以外のTab文字の表示幅（スペースいくつ分）
set shiftwidth=2 " 行頭でのTab文字の表示幅

" 検索系
set ignorecase "大文字小文字を区別しない(検索時)
set smartcase " 検索文字列に大文字が含まれている場合は区別して検索する
set incsearch " 検索文字列入力時に順次対象文字列にヒットさせる
set wrapscan " 検索時に最後まで行ったら最初に戻る
set hlsearch " 検索語をハイライト

" モードによるカーソル切り替え
if has('vim_starting')
  " 挿入モード時に非点滅の縦棒タイプのカーソル
  let &t_SI .= "\e[6 q"
  " ノーマルモード時に非点滅のブロックタイプのカーソル
  let &t_EI .= "\e[2 q"
  " 置換モード時に非点滅の下線タイプのカーソル
  let &t_SR .= "\e[4 q"
endif

" key map
" C-f でノーマルモード
imap <C-f> <Esc>
" インサートモードで移動
imap <C-j> <Down>
imap <C-h> <left>
imap <C-l> <Right>
imap <C-k> <Up>

" C-a C-e で行頭、行末移動
inoremap <C-e> <Esc>$
inoremap <C-a> <Esc>^
noremap <C-e> <Esc>$
noremap <C-a> <Esc>^

noremap <C-k> {
noremap <C-j> }


"------------------------------------------
" プラグイン
call plug#begin('~/.vim/plugged')
" ファイルオープンを便利に
Plug 'Shougo/unite.vim'
" Unite.vimで最近使ったファイルを表示できるようにする
Plug 'Shougo/neomru.vim'

" ファイルアイコン
Plug 'ryanoasis/vim-devicons'
" ステータスラインの表示強化
Plug 'itchyny/lightline.vim'
" コメントON/OFFを手軽に
Plug 'tomtom/tcomment_vim'
" 行末の半角スペースを可視化
Plug 'bronson/vim-trailing-whitespace'
" ファイルツリー表示
Plug 'scrooloose/nerdtree'
nnoremap <silent><C-t> :NERDTreeToggle<CR>
" submode
Plug 'kana/vim-submode'

if has('lua') " lua機能が有効になっている場合・・・・・・①
    " コードの自動補完
    Plug 'Shougo/neocomplete.vim'
    " スニペットの補完機能
    Plug 'Shougo/neosnippet'
    " スニペット集
    Plug 'Shougo/neosnippet-snippets'
endif

" 言語のプラグイン
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

call plug#end()
"------------------------------------------

" Unite.vimの設定
noremap <C-P> :Unite buffer<CR>
" ファイル一覧
noremap <C-N> :Unite -buffer-name=file file<CR>
" 最近使ったファイルの一覧
noremap <C-Z> :Unite file_mru<CR>
" sourcesを「今開いているファイルのディレクトリ」とする
noremap :uff :<C-u>UniteWithBufferDir file -buffer-name=file<CR>
" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-S> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-S> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

" 画面分割
nnoremap s <Nop>
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sh <C-w>h
nnoremap sn gt
nnoremap sp gT
nnoremap sr <C-w>r
nnoremap s= <C-w>=
nnoremap sw <C-w>w
nnoremap so <C-w>_<C-w>|
nnoremap sO <C-w>=
nnoremap sN :<C-u>bn<CR>
nnoremap sP :<C-u>bp<CR>
nnoremap st :<C-u>tabnew<CR>
nnoremap sT :<C-u>Unite tab<CR>
nnoremap ss :<C-u>sp<CR>
nnoremap sv :<C-u>vs<CR>
nnoremap sq :<C-u>q<CR>
nnoremap sQ :<C-u>bd<CR>

call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')

" タブで引数ファイルを開く
nnoremap <silent> <leader>te :<c-u>tabedit<cr>
" ターミナルモード
nnoremap tm :belowright :terminal<CR>
tnoremap <C-Q> <C-W>N

" 全ページヤンク
nnoremap Y y$
" =を二回連続入力でバッファ全体をインデント整理
nnoremap == gg=G

